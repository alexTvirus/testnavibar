/* * To change this license header, choose License Headers in Project Properties. * To change this template file, choose Tools | Templates * and open the template in the editor. */package cc.xpcas.nettysocks;import Enity.ProxyEntity;import PackageChongHack.StringConstant;import PackageChongHack.StringURL;import Service.ServiceIndexListServer;import View.View;import static cc.xpcas.nettysocks.MainController.getProxyString;import cc.xpcas.nettysocks.utils.Ghi_file_txt;import java.io.IOException;import java.net.HttpURLConnection;import java.net.InetSocketAddress;import java.net.Proxy;import java.net.SocketAddress;import java.net.URL;import java.util.logging.Level;import java.util.logging.Logger;/** * * @author Alex */public class WorkerCheckConnect extends Thread {    private Server inner_server;    public WorkerCheckConnect(Server server) {        this.inner_server = server;    }    @Override    public void run() {        View.jframe.setStatus(ServiceIndexListServer.getRowTableId(inner_server.rowid), StringConstant.CHECKING);//        System.out.println("ip: " + inner_server.ip + " port: " + inner_server.port + "------------------------------------------------------------");        try {            String status = MainController.checkConnectForChangeIp(inner_server.port);            if (StringConstant.CONNECTED.equals(status)) {                View.jframe.setStatus(ServiceIndexListServer.getRowTableId(inner_server.rowid), StringConstant.CONNECTED);                MainController.listserver.get(MainController.listserver.indexOf(inner_server)).StatusConnect = StringConstant.CONNECTED;            } else {                View.jframe.setStatus(ServiceIndexListServer.getRowTableId(inner_server.rowid), StringConstant.DISCONNECTED);                if (!MainController.listProxyInput.isEmpty()) {                    ProxyEntity entity = new ProxyEntity();                    entity.setIp(inner_server.socksProperties.upstream.getAddress().getHost());                    entity.setPort(Integer.toString(inner_server.socksProperties.upstream.getAddress().getPort()));                    entity.setPassword(inner_server.socksProperties.upstream.pass);                    entity.setUsername(inner_server.socksProperties.upstream.user);                    MainController.changeip(entity, inner_server.port);                }            }        } catch (Exception e) {            System.out.println("loi:" + e.getMessage());        }    }}